# Ultralytics YOLO ðŸš€, GPL-3.0 license
# Builds ultralytics/ultralytics:latest-cpu image on DockerHub https://hub.docker.com/r/ultralytics/ultralytics
# Image is CPU-optimized for ONNX, OpenVINO and PyTorch YOLOv8 deployments

# Start FROM Ubuntu image https://hub.docker.com/_/ubuntu
FROM ubuntu:rolling

# Downloads to user config dir
ADD https://ultralytics.com/assets/Arial.ttf https://ultralytics.com/assets/Arial.Unicode.ttf /root/.config/Ultralytics/

# Install linux packages
ENV DEBIAN_FRONTEND noninteractive
# JIMM: removed these since they cause build failures: libgl1-mesa-glx
# JIMM: added "python3.11-venv ffmpeg libsm6 libxext6"
RUN apt update && \
  TZ=Etc/UTC apt install -y tzdata && \
  apt install --no-install-recommends -y python3-pip git zip curl htop libglib2.0-0 libpython3-dev gnupg g++ \
    python3.11-venv ffmpeg libsm6 libxext6 && \
  apt clean
# RUN alias python=python3

# Create working directory
RUN mkdir -p /usr/src/ultralytics
WORKDIR /usr/src/ultralytics

# Copy contents
# COPY . /usr/src/app  (issues as not a .git directory)
RUN git clone https://github.com/ultralytics/ultralytics /usr/src/ultralytics

# Install pip packages
# JIMM: BEGIN:
RUN python3 -m venv ~/envs/yolov8
# JIMM: END:
RUN /bin/bash -c "source ~/envs/yolov8/bin/activate && python3 -m pip install --upgrade pip wheel"
RUN /bin/bash -c "source ~/envs/yolov8/bin/activate && pip install --no-cache '.[export]' albumentations gsutil notebook \
        --extra-index-url https://download.pytorch.org/whl/cpu"

# Cleanup
ENV DEBIAN_FRONTEND teletype


# Usage Examples -------------------------------------------------------------------------------------------------------

# Build and Push
# t=ultralytics/ultralytics:latest-cpu && sudo docker build -f docker/Dockerfile-cpu -t $t . && sudo docker push $t

# Pull and Run
# t=ultralytics/ultralytics:latest-cpu && sudo docker pull $t && sudo docker run -it --ipc=host -v "$(pwd)"/datasets:/usr/src/datasets $t
